#include <topcoder.h>

int
run(vector<int> stones)
{
  int ans = 0;
  int N = stones.size();
  int sum = 0;
  REP(i, N) sum += stones[i];

  // a reminder must be 0
  if (sum % N != 0)
    return -1;

  int ave = sum / N;
  // P(ave);

  FOR(i, 0, N){
    int s = stones[i];
    int d = abs(s - ave);

    // a difference must be 2 * n
    if (d % 2 != 0)
      return -1;

    // a number of pile must be 0, 1, or 2
    if (s > ave && s <= 2)
      return -1;

    // you need move a pair of s at d / 2 times
    ans += d / 2;
  }

  return ans / 2;
}

int main()
{
  P(run({7, 15, 9, 5}));
  P(run({10, 16}));
  P(run({2, 8, 4}));
  P(run({17}));
  P(run({10, 15, 20, 12, 1, 20}));

  P(run({75, 1, 21, 33, 99, 71, 65, 21, 99, 7, 43, 53, 5, 39, 13, 65, 41, 97, 63, 41, 91, 85, 3, 89, 49, 57, 75, 87, 59, 99, 55, 35, 5, 75, 71, 3, 49, 35, 25, 47, 45, 71, 99, 53, 13, 11, 19, 55, 11, 85, 99, 3, 71, 1, 91, 23, 61, 69, 9, 21, 69, 67, 59, 73, 47, 29}));

  P(run({4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100}));
 return 0;
}
